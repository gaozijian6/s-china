// export const SOLUTION_METHODS = {
//   CHECK_CANDIDATE: "检查候选数法",
//   SINGLE_CANDIDATE: "唯一余数法",
//   HIDDEN_SINGLE_ROW: "隐性单数法（行）",
//   HIDDEN_SINGLE_COLUMN: "隐性单数法（列）",
//   HIDDEN_SINGLE_BOX: "隐性单数法（宫）",
//   BLOCK_ELIMINATION_ROW: "区块摒除法(行)",
//   BLOCK_ELIMINATION_COLUMN: "区块摒除法(列)",
//   BLOCK_ELIMINATION_BOX_ROW: "区块摒除法(宫-行)",
//   BLOCK_ELIMINATION_BOX_COLUMN: "区块摒除法(宫-列)",
//   NAKED_PAIR_ROW: "显性数对法(行)",
//   NAKED_PAIR_COLUMN: "显性数对法(列)",
//   NAKED_PAIR_BOX: "显性数对法(宫)",
//   NAKED_TRIPLE_ROW1: "显性三数对(行)",
//   NAKED_TRIPLE_COLUMN1: "显性三数对(列)",
//   NAKED_TRIPLE_BOX1: "显性三数对(宫)",
//   NAKED_TRIPLE_ROW2: "显性三数对(行)",
//   NAKED_TRIPLE_COLUMN2: "显性三数对(列)",
//   NAKED_TRIPLE_BOX2: "显性三数对(宫)",
//   HIDDEN_PAIR_ROW: "隐形数对法(行)",
//   HIDDEN_PAIR_COLUMN: "隐形数对法(列)",
//   HIDDEN_PAIR_BOX: "隐形数对法(宫)",
//   HIDDEN_TRIPLE_ROW1: "隐形三数对(行)",
//   HIDDEN_TRIPLE_COLUMN1: "隐形三数对(列)",
//   HIDDEN_TRIPLE_BOX1: "隐形三数对(宫)",
//   HIDDEN_TRIPLE_ROW2: "隐形三数对(行)",
//   HIDDEN_TRIPLE_COLUMN2: "隐形三数对(列)",
//   HIDDEN_TRIPLE_BOX2: "隐形三数对(宫)",
//   NAKED_QUADRUPLE_ROW: "显性四数对法(行)",
//   NAKED_QUADRUPLE_COLUMN: "显性四数对法(列)",
//   NAKED_QUADRUPLE_BOX: "显性四数对法(宫)",
//   X_WING_ROW: "X-Wing(行)",
//   X_WING_COLUMN: "X-Wing(列)",
//   X_WING_VARIENT_ROW: "二阶退化鱼(行)",
//   X_WING_VARIENT_COLUMN: "二阶退化鱼(列)",
//   XY_WING: "XY-Wing",
//   XYZ_WING: "XYZ-Wing",
//   SKYSCRAPER: "摩天楼",
//   SKYSCRAPER2: "摩天楼2",
//   REMOTE_PAIR: "远程数对",
//   COMBINATION_CHAIN: "组合链",
//   SWORDFISH_ROW: "三阶鱼(行)",
//   SWORDFISH_COLUMN: "三阶鱼(列)",
//   SWORDFISH_WITH_FIN_ROW: "三阶鱼带鳍(行)",
//   SWORDFISH_WITH_FIN_COLUMN: "三阶鱼带鳍(列)",
//   WXYZ_WING: "WXYZ-Wing",
//   TRIAL_AND_ERROR: "试数法",
// };

export const SOLUTION_METHODS = {
  CHECK_CANDIDATE: "Candidate Checking",
  SINGLE_CANDIDATE: "Single Candidate",
  HIDDEN_SINGLE_ROW: "Hidden Single(ROW)",
  HIDDEN_SINGLE_COLUMN: "Hidden Single(COLUMN)",
  HIDDEN_SINGLE_BOX: "Hidden Single(BOX)",
  BLOCK_ELIMINATION_ROW: "Block Elimination(ROW)",
  BLOCK_ELIMINATION_COLUMN: "Block Elimination(COLUMN)",
  BLOCK_ELIMINATION_BOX_ROW: "Block Elimination(BOX-ROW)",
  BLOCK_ELIMINATION_BOX_COLUMN: "Block Elimination(BOX-COLUMN)",
  NAKED_PAIR_ROW: "Naked Pair(ROW)",
  NAKED_PAIR_COLUMN: "Naked Pair(COLUMN)",
  NAKED_PAIR_BOX: "Naked Pair(BOX)",
  NAKED_TRIPLE_ROW1: "Naked Triple(ROW1)",
  NAKED_TRIPLE_COLUMN1: "Naked Triple(COLUMN1)",
  NAKED_TRIPLE_BOX1: "Naked Triple(BOX1)",
  NAKED_TRIPLE_ROW2: "Naked Triple(ROW2)",
  NAKED_TRIPLE_COLUMN2: "Naked Triple(COLUMN2)",
  NAKED_TRIPLE_BOX2: "Naked Triple(BOX2)",
  HIDDEN_PAIR_ROW: "Hidden Pair(ROW)",
  HIDDEN_PAIR_COLUMN: "Hidden Pair(COLUMN)",
  HIDDEN_PAIR_BOX: "Hidden Pair(BOX)",
  HIDDEN_TRIPLE_ROW1: "Hidden Triple(ROW1)",
  HIDDEN_TRIPLE_COLUMN1: "Hidden Triple(COLUMN1)",
  HIDDEN_TRIPLE_BOX1: "Hidden Triple(BOX1)",
  HIDDEN_TRIPLE_ROW2: "Hidden Triple(ROW2)",
  HIDDEN_TRIPLE_COLUMN2: "Hidden Triple(COLUMN2)",
  HIDDEN_TRIPLE_BOX2: "Hidden Triple(BOX2)",
  NAKED_QUADRUPLE_ROW: "Naked Quadruple(ROW)",
  NAKED_QUADRUPLE_COLUMN: "Naked Quadruple(COLUMN)",
  NAKED_QUADRUPLE_BOX: "Naked Quadruple(BOX)",
  X_WING_ROW: "X-Wing(ROW)",
  X_WING_COLUMN: "X-Wing(COLUMN)",
  X_WING_VARIENT_ROW: "Finned X-Wing(ROW)",
  X_WING_VARIENT_COLUMN: "Finned X-Wing(COLUMN)",
  XY_WING: "XY-Wing",
  XYZ_WING: "XYZ-Wing",
  SKYSCRAPER: "Skyscraper",
  SKYSCRAPER2: "Skyscraper2",
  REMOTE_PAIR: "Remote Pair",
  COMBINATION_CHAIN: "Chain of Combinations",
  SWORDFISH_ROW: "Swordfish(ROW)",
  SWORDFISH_COLUMN: "Swordfish(COLUMN)",
  SWORDFISH_WITH_FIN_ROW: "Finned Swordfish(ROW)",
  SWORDFISH_WITH_FIN_COLUMN: "Finned Swordfish(COLUMN)",
  WXYZ_WING: "WXYZ-Wing",
  TRIAL_AND_ERROR: "Trial and Error",
};


export const STRONG_LINK_TYPE = {
  // 偶关联
  EVEN: 2,
  // 奇关联
  ODD: 1,
  // 无关联
  NONE: 0,
};

export const DIFFICULTY = {
  ENTRY: "entry",
  EASY: "easy",
  MEDIUM: "medium",
  HARD: "hard",
  EXTREME: "extreme",
  DIY: "diy",
};

export const SUDOKU_STATUS = {
  VOID: 'VOID',
  SOLVING: 'SOLVING',
  SOLVED: 'SOLVED',
  ILLEGAL: 'ILLEGAL',
  INCOMPLETE: 'INCOMPLETE',
} as const;
